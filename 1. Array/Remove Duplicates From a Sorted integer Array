Code: 
public class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }

        int k = 1; // Initialize the count of unique elements to 1
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[k - 1]) {
                nums[k] = nums[i]; // Overwrite the next unique element
                k++;
            }
        }
        
        return k;
    }
}

Complexity:
Time complexity: The time complexity of this algorithm is O(n).
Space complexity: The space complexity of this algorithm is O(1).

Algorithm:
The method starts by checking if the array is empty.
It initializes a counter k to keep track of the number of unique elements.
It then loops through the array, checking for duplicates.
If it finds a new unique element, it places it in the correct position in the array and increments the counter.
Finally, it returns the count of unique elements.
