/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        // Declare two pointers slow and fast
        // Slow moves 1 step and Fast moves 2 steps
        if (head == null || head.next == null) {
            return false; // If the list is empty or has only one node, no cycle can exist.
        }
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            // Check if both pointers are equal
            // If they are equal, then there is a cycle in the linked list
            if (slow == fast) {
                return true; // Return true if the condition is met
            }
        }
        return false; // If no cycle is detected, return false
    }
}
