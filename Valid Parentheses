Code:
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (c == '(')
                stack.push(')');
            else if (c == '{')
                stack.push('}');
            else if (c == '[')
                stack.push(']');
            else if (stack.isEmpty() || stack.pop() != c)
                return false;
        }
        return stack.isEmpty();
    }
}

Explanation:
1. Create a Stack:
Initialize an empty stack to keep track of closing brackets corresponding to the opening brackets encountered in the string.
2. Loop through Each Character:
Convert the string to a character array and iterate through each character.
3. Handle Opening Brackets:
For each opening bracket (, {, or [, push the corresponding closing bracket ), }, or ] onto the stack.
4. Handle Closing Brackets:
For each closing bracket, check if the stack is empty or if the top of the stack does not match the closing bracket. If either condition is true, the string is not valid, so return false.
5. Check for Unmatched Opening Brackets:
After the loop, if the stack is empty, all opening brackets have been matched with corresponding closing brackets, so the string is valid, and return true. Otherwise, return false.
